const User = require("../models/userModel");
const Travel = require("../models/travelModel");
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const jwtSecret = process.env.JWT_SECRET;

const registerUser = async (req, res) => {
  const { nickname, email, password } = req.body;

  // Check if all required fields are provided
  if (!nickname || !email || !password) {
    return res
      .status(400)
      .json({ message: "Please provide all required fields." });
  }

  try {
    // Check if the user already exists in the database
    const userExists = await User.findOne({ email });
    if (userExists) {
      return res.status(400).json({ message: "User already exists." });
    }

    // Hash the password before saving
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    const newUser = new User({
      nickname,
      email,
      password: hashedPassword,
    });

    const savedUser = await newUser.save();

    res.status(201).json({
        message: "User created successfully!",
        user: { _id: savedUser._id, nickname: savedUser.nickname, email: savedUser.email },
      });
} catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

const loginUser = async (req, res) => {
  const { email, password } = req.body;

  // Validate input
  if (!email || !password) {
    return res.status(400).json({ message: 'Please provide email and password.' });
  }

  try {
    // Check if user exists
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(401).json({ message: 'Invalid email or password.' });
    }

    // Check if the password matches
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ message: 'Invalid email or password.' });
    }

    // Generate JWT token
    const token = jwt.sign({ userId: user._id }, jwtSecret, { expiresIn: '1h' });

    res.json({
      message: 'Login successful',
      token,
      user: { id: user._id, nickname: user.nickname, email: user.email },
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
};

const updatePassword = async (req, res) => {
  const { oldPassword, newPassword } = req.body;

  if (!oldPassword || !newPassword) {
    return res.status(400).json({ message: "Please provide old and new passwords." });
  }

  try {
    const user = await User.findById(req.user);

    if (!user) {
      return res.status(404).json({ message: "User not found." });
    }

    // Check if the old password matches
    const isMatch = await bcrypt.compare(oldPassword, user.password);

    if (!isMatch) {
      return res.status(400).json({ message: "Old password is incorrect." });
    }

    // Hash the new password
    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(newPassword, salt);

    // Save the updated user
    await user.save();

    res.status(200).json({ message: "Password updated successfully." });
  } catch (error) {
    console.error(error.message);
    res.status(500).json({ message: "Server error." });
  }
};
const createTravel = async (req, res) => {
  const { title, description, dateFrom, dateTo, location, image } = req.body;

  // Validate that required fields are provided
  if (!title || !dateFrom || !dateTo || !location.country) {
    return res.status(400).json({ message: "Please provide all required fields." });
  }

  try {
    const newTravel = new Travel({
      title,
      description,
      dateFrom,
      dateTo,
      location,
      image,
      user: req.user, //from authMiddleware
    });

    const savedTravel = await newTravel.save();

    res.status(201).json({
      success: true,
      message: "Travel created successfully!",
      data: savedTravel,
    });
  } catch (error) {
    console.error(error.message);
    res.status(500).json({ message: "Server error, unable to create travel." });
  }
};

const deleteTravel = async (req, res) => {
  const { id } = req.params;

  try {
    // Check if the travel entry exists
    const travel = await Travel.findById(id);
    if (!travel) {
      return res.status(404).json({ message: 'Travel entry not found.' });
    }

    //Check if the user is authorized to delete this travel
    if (travel.user.toString() !== req.user) {
      return res.status(403).json({ message: 'Unauthorized to delete this travel entry.' });
    }

    await Travel.findByIdAndDelete(id);

    res.status(200).json({ message: 'Travel entry deleted successfully.' });
  } catch (error) {
    console.error(error.message);
    res.status(500).json({ message: 'Server error, unable to delete travel entry.' });
  }
};

const updateTravel = async (req, res) => {
  const { id } = req.params;
  const updateFields = req.body;

  try {
    const travel = await Travel.findById(id);

    if (!travel) {
      return res.status(404).json({ message: 'Travel entry not found.' });
    }

    //Check if the user is authorized to delete this travel
    if (travel.user.toString() !== req.user) {
      return res.status(403).json({ message: 'Unauthorized to update this travel entry.' });
    }

    Object.keys(updateFields).forEach(field => {
      travel[field] = updateFields[field];
    });

    const updatedTravel = await travel.save();

    res.status(200).json({
      success: true,
      message: 'Travel entry updated successfully.',
      data: updatedTravel,
    });
  } catch (error) {
    console.error(error.message);
    res.status(500).json({ message: 'Server error, unable to update travel entry.' });
  }
};
module.exports = { registerUser, loginUser, updatePassword, createTravel, deleteTravel, updateTravel };
